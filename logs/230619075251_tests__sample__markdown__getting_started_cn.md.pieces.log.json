[{"text": "<h1>Quickstart Guide</h1>\n<p>This tutorial gives you a quick walkthrough about building an end-to-end language model application with LangChain.</p>\n<h2>Installation</h2>\n<p>To get started, install LangChain with the following command:</p>\n<p>```bash\npip install langchain</p>\n<h1>or</h1>\n<p>conda install langchain -c conda-forge\n```</p>\n<h2>Environment Setup</h2>\n<p>Using LangChain will usually require integrations with one or more model providers, data stores, apis, etc.</p>\n<p>For this example, we will be using OpenAI's APIs, so we will first need to install their SDK:</p>\n<p><code>bash\npip install openai</code></p>\n<p>We will then need to set the environment variable in the terminal.</p>\n<p><code>bash\nexport OPENAI_API_KEY=\"...\"</code></p>\n<p>Alternatively, you could do this from inside the Jupyter notebook (or Python script):</p>\n<p><code>python\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"...\"</code></p>\n<h2>Building a Language Model Application: LLMs</h2>\n", "type": "text", "translate": {"translate": true}, "length": 973, "metadata": {}}, {"text": "<p>Now that we have installed LangChain and set up our environment, we can start building our language model application.</p>\n<p>LangChain provides many modules that can be used to build language model applications. Modules can be combined to create more complex applications, or be used individually for simple applications.</p>\n<h2>LLMs: Get predictions from a language model</h2>\n<p>The most basic building block of LangChain is calling an LLM on some input.\nLet's walk through a simple example of how to do this. \nFor this purpose, let's pretend we are building a service that generates a company name based on what the company makes.</p>\n<p>In order to do this, we first need to import the LLM wrapper.</p>\n<p><code>python\nfrom langchain.llms import OpenAI</code></p>\n<p>We can then initialize the wrapper with any arguments.\nIn this example, we probably want the outputs to be MORE random, so we'll initialize it with a HIGH temperature.</p>\n<p><code>python\n", "type": "text", "translate": {"translate": true}, "length": 964, "metadata": {}}, {"text": "llm = OpenAI(temperature=0.9)</code></p>\n<p>We can now call it on some input!</p>\n<p><code>python\ntext = \"What would be a good company name for a company that makes colorful socks?\"\nprint(llm(text))</code></p>\n<p><code>pycon\nFeetful of Fun</code></p>\n<p>For more details on how to use LLMs within LangChain, see the <a href=\"../modules/models/llms/getting_started.ipynb\">LLM getting started guide</a>.</p>\n<h2>Prompt Templates: Manage prompts for LLMs</h2>\n<p>Calling an LLM is a great first step, but it's just the beginning.\nNormally when you use an LLM in an application, you are not sending user input directly to the LLM.\nInstead, you are probably taking user input and constructing a prompt, and then sending that to the LLM.</p>\n<p>For example, in the previous example, the text we passed in was hardcoded to ask for a name for a company that made colorful socks.\n", "type": "text", "translate": {"translate": true}, "length": 871, "metadata": {}}, {"text": "In this imaginary service, what we would want to do is take only the user input describing what the company does, and then format the prompt with that information.</p>\n<p>This is easy to do with LangChain!</p>\n<p>First lets define the prompt template:</p>\n<p>```python\nfrom langchain.prompts import PromptTemplate</p>\n<p>prompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=\"What is a good name for a company that makes {product}?\",\n)\n```</p>\n<p>Let's now see how this works! We can call the <code>.format</code> method to format it.</p>\n<p><code>python\nprint(prompt.format(product=\"colorful socks\"))</code></p>\n<p><code>pycon\nWhat is a good name for a company that makes colorful socks?</code></p>\n<p><a href=\"../modules/prompts/chat_prompt_template.ipynb\">For more details, check out the getting started guide for prompts.</a></p>\n<h2>Chains: Combine LLMs and prompts in multi-step workflows</h2>\n", "type": "text", "translate": {"translate": true}, "length": 917, "metadata": {}}, {"text": "<p>Up until now, we've worked with the PromptTemplate and LLM primitives by themselves. But of course, a real application is not just one primitive, but rather a combination of them.</p>\n<p>A chain in LangChain is made up of links, which can be either primitives like LLMs or other chains.</p>\n<p>The most core type of chain is an LLMChain, which consists of a PromptTemplate and an LLM.</p>\n<p>Extending the previous example, we can construct an LLMChain which takes user input, formats it with a PromptTemplate, and then passes the formatted response to an LLM.</p>\n<p>```python\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import OpenAI</p>\n<p>llm = OpenAI(temperature=0.9)\nprompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=\"What is a good name for a company that makes {product}?\",\n)\n```</p>\n<p>We can now create a very simple chain that will take user input, format the prompt with it, and then send it to the LLM:</p>\n<p><code>python\nfrom langchain.chains import LLMChain\n", "type": "text", "translate": {"translate": true}, "length": 1019, "metadata": {}}, {"text": "chain = LLMChain(llm=llm, prompt=prompt)</code></p>\n<p>Now we can run that chain only specifying the product!</p>\n<p>```python\nchain.run(\"colorful socks\")</p>\n<h1>-&gt; '\\n\\nSocktastic!'</h1>\n<p>```</p>\n<p>There we go! There's the first chain - an LLM Chain.\nThis is one of the simpler types of chains, but understanding how it works will set you up well for working with more complex chains.</p>\n<p><a href=\"../modules/chains/getting_started.ipynb\">For more details, check out the getting started guide for chains.</a></p>\n<h2>Agents: Dynamically Call Chains Based on User Input</h2>\n<p>So far the chains we've looked at run in a predetermined order.</p>\n<p>Agents no longer do: they use an LLM to determine which actions to take and in what order. An action can either be using a tool and observing its output, or returning to the user.</p>\n<p>When used correctly agents can be extremely powerful. In this tutorial, we show you how to easily use agents through the simplest, highest level API.</p>\n", "type": "text", "translate": {"translate": true}, "length": 1000, "metadata": {}}, {"text": "<p>In order to load agents, you should understand the following concepts:</p>\n<ul>\n<li>Tool: A function that performs a specific duty. This can be things like: Google Search, Database lookup, Python REPL, other chains. The interface for a tool is currently a function that is expected to have a string as an input, with a string as an output.</li>\n<li>LLM: The language model powering the agent.</li>\n<li>Agent: The agent to use. This should be a string that references a support agent class. Because this notebook focuses on the simplest, highest level API, this only covers using the standard supported agents. If you want to implement a custom agent, see the documentation for custom agents (coming soon).</li>\n</ul>\n<p><strong>Agents</strong>: For a list of supported agents and their specifications, see <a href=\"../modules/agents/agents.md\">here</a>.</p>\n<p><strong>Tools</strong>: For a list of predefined tools and their specifications, see <a href=\"../modules/agents/tools.md\">here</a>.</p>\n", "type": "text", "translate": {"translate": true}, "length": 1000, "metadata": {}}, {"text": "<p>For this example, you will also need to install the SerpAPI Python package.</p>\n<p><code>bash\npip install google-search-results</code></p>\n<p>And set the appropriate environment variables.</p>\n<p><code>python\nimport os\nos.environ[\"SERPAPI_API_KEY\"] = \"...\"</code></p>\n<p>Now we can get started!</p>\n<p>```python\nfrom langchain.agents import load_tools\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.llms import OpenAI</p>\n<h1>First, let's load the language model we're going to use to control the agent.</h1>\n<p>llm = OpenAI(temperature=0)</p>\n<h1>Next, let's load some tools to use. Note that the <code>llm-math</code> tool uses an LLM, so we need to pass that in.</h1>\n<p>tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)</p>\n<h1>Finally, let's initialize an agent with the tools, the language model, and the type of agent we want to use.</h1>\n", "type": "text", "translate": {"translate": true}, "length": 905, "metadata": {}}, {"text": "<p>agent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)</p>\n<h1>Now let's test it out!</h1>\n<p>agent.run(\"What was the high temperature in SF yesterday in Fahrenheit? What is that number raised to the .023 power?\")\n```</p>\n<p>```pycon</p>\n<blockquote>\n<p>Entering new AgentExecutor chain...\n I need to find the temperature first, then use the calculator to raise it to the .023 power.\nAction: Search\nAction Input: \"High temperature in SF yesterday\"\nObservation: San Francisco Temperature Yesterday. Maximum temperature yesterday: 57 \u00b0F (at 1:56 pm) Minimum temperature yesterday: 49 \u00b0F (at 1:56 am) Average temperature ...\nThought: I now have the temperature, so I can use the calculator to raise it to the .023 power.\nAction: Calculator\nAction Input: 57^.023\nObservation: Answer: 1.0974509573251117</p>\n</blockquote>\n<p>Thought: I now know the final answer\n", "type": "text", "translate": {"translate": true}, "length": 901, "metadata": {}}, {"text": "Final Answer: The high temperature in SF yesterday in Fahrenheit raised to the .023 power is 1.0974509573251117.</p>\n<blockquote>\n<p>Finished chain.\n```</p>\n</blockquote>\n<h2>Memory: Add State to Chains and Agents</h2>\n<p>So far, all the chains and agents we've gone through have been stateless. But often, you may want a chain or agent to have some concept of \"memory\" so that it may remember information about its previous interactions. The clearest and simple example of this is when designing a chatbot - you want it to remember previous messages so it can use context from that to have a better conversation. This would be a type of \"short-term memory\". On the more complex side, you could imagine a chain/agent remembering key pieces of information over time - this would be a form of \"long-term memory\". For more concrete ideas on the latter, see this <a href=\"https://memprompt.com/\">awesome paper</a>.</p>\n", "type": "text", "translate": {"translate": true}, "length": 915, "metadata": {}}, {"text": "<p>LangChain provides several specially created chains just for this purpose. This notebook walks through using one of those chains (the <code>ConversationChain</code>) with two different types of memory.</p>\n<p>By default, the <code>ConversationChain</code> has a simple type of memory that remembers all previous inputs/outputs and adds them to the context that is passed. Let's take a look at using this chain (setting <code>verbose=True</code> so we can see the prompt).</p>\n<p>```python\nfrom langchain import OpenAI, ConversationChain</p>\n<p>llm = OpenAI(temperature=0)\nconversation = ConversationChain(llm=llm, verbose=True)</p>\n<p>output = conversation.predict(input=\"Hi there!\")\nprint(output)\n```</p>\n<p>```pycon</p>\n<blockquote>\n<p>Entering new chain...\nPrompt after formatting:\n", "type": "text", "translate": {"translate": true}, "length": 788, "metadata": {}}, {"text": "The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.</p>\n</blockquote>\n<p>Current conversation:</p>\n<p>Human: Hi there!\nAI:</p>\n<blockquote>\n<p>Finished chain.\n' Hello! How are you today?'\n```</p>\n</blockquote>\n<p><code>python\noutput = conversation.predict(input=\"I'm doing well! Just having a conversation with an AI.\")\nprint(output)</code></p>\n<p>```pycon</p>\n<blockquote>\n<p>Entering new chain...\nPrompt after formatting:\nThe following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.</p>\n</blockquote>\n<p>Current conversation:</p>\n<p>Human: Hi there!\nAI:  Hello! How are you today?\nHuman: I'm doing well! Just having a conversation with an AI.\n", "type": "text", "translate": {"translate": true}, "length": 994, "metadata": {}}, {"text": "AI:</p>\n<blockquote>\n<p>Finished chain.\n\" That's great! What would you like to talk about?\"\n```</p>\n</blockquote>\n<h2>Building a Language Model Application: Chat Models</h2>\n<p>Similarly, you can use chat models instead of LLMs. Chat models are a variation on language models. While chat models use language models under the hood, the interface they expose is a bit different: rather than expose a \"text in, text out\" API, they expose an interface where \"chat messages\" are the inputs and outputs.</p>\n<p>Chat model APIs are fairly new, so we are still figuring out the correct abstractions.</p>\n<h2>Get Message Completions from a Chat Model</h2>\n", "type": "text", "translate": {"translate": true}, "length": 647, "metadata": {}}, {"text": "<p>You can get chat completions by passing one or more messages to the chat model. The response will be a message. The types of messages currently supported in LangChain are <code>AIMessage</code>, <code>HumanMessage</code>, <code>SystemMessage</code>, and <code>ChatMessage</code> -- <code>ChatMessage</code> takes in an arbitrary role parameter. Most of the time, you'll just be dealing with <code>HumanMessage</code>, <code>AIMessage</code>, and <code>SystemMessage</code>.</p>\n<p>```python\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import (\n    AIMessage,\n    HumanMessage,\n    SystemMessage\n)</p>\n<p>chat = ChatOpenAI(temperature=0)\n```</p>\n<p>You can get completions by passing in a single message.</p>\n<p>```python\nchat([HumanMessage(content=\"Translate this sentence from English to French. I love programming.\")])</p>\n<h1>-&gt; AIMessage(content=\"J'aime programmer.\", additional_kwargs={})</h1>\n<p>```</p>\n", "type": "text", "translate": {"translate": true}, "length": 939, "metadata": {}}, {"text": "<p>You can also pass in multiple messages for OpenAI's gpt-3.5-turbo and gpt-4 models.</p>\n<p>```python\nmessages = [\n    SystemMessage(content=\"You are a helpful assistant that translates English to French.\"),\n    HumanMessage(content=\"Translate this sentence from English to French. I love programming.\")\n]\nchat(messages)</p>\n<h1>-&gt; AIMessage(content=\"J'aime programmer.\", additional_kwargs={})</h1>\n<p>```</p>\n<p>You can go one step further and generate completions for multiple sets of messages using <code>generate</code>. This returns an <code>LLMResult</code> with an additional <code>message</code> parameter:\n```python\nbatch_messages = [\n    [\n        SystemMessage(content=\"You are a helpful assistant that translates English to French.\"),\n        HumanMessage(content=\"Translate this sentence from English to French. I love programming.\")\n    ],\n    [\n        SystemMessage(content=\"You are a helpful assistant that translates English to French.\"),\n        HumanMessage(content=\"Translate this sentence from English to French. I love artificial intelligence.\")\n    ],\n]\nresult = chat.generate(batch_messages)\n", "type": "text", "translate": {"translate": true}, "length": 1122, "metadata": {}}, {"text": "result</p>\n<h1>-&gt; LLMResult(generations=[[ChatGeneration(text=\"J'aime programmer.\", generation_info=None, message=AIMessage(content=\"J'aime programmer.\", additional_kwargs={}))], [ChatGeneration(text=\"J'aime l'intelligence artificielle.\", generation_info=None, message=AIMessage(content=\"J'aime l'intelligence artificielle.\", additional_kwargs={}))]], llm_output={'token_usage': {'prompt_tokens': 71, 'completion_tokens': 18, 'total_tokens': 89}})</h1>\n<p>```</p>\n<p>You can recover things like token usage from this LLMResult:\n```\nresult.llm_output['token_usage']</p>\n<h1>-&gt; {'prompt_tokens': 71, 'completion_tokens': 18, 'total_tokens': 89}</h1>\n<p>```</p>\n<h2>Chat Prompt Templates</h2>\n", "type": "text", "translate": {"translate": true}, "length": 696, "metadata": {}}, {"text": "<p>Similar to LLMs, you can make use of templating by using a <code>MessagePromptTemplate</code>. You can build a <code>ChatPromptTemplate</code> from one or more <code>MessagePromptTemplate</code>s. You can use <code>ChatPromptTemplate</code>'s <code>format_prompt</code> -- this returns a <code>PromptValue</code>, which you can convert to a string or <code>Message</code> object, depending on whether you want to use the formatted value as input to an llm or chat model.</p>\n<p>For convience, there is a <code>from_template</code> method exposed on the template. If you were to use this template, this is what it would look like:</p>\n<p>```python\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)</p>\n<p>chat = ChatOpenAI(temperature=0)</p>\n<p>template=\"You are a helpful assistant that translates {input_language} to {output_language}.\"\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template=\"{text}\"\n", "type": "text", "translate": {"translate": true}, "length": 1064, "metadata": {}}, {"text": "human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)</p>\n<p>chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])</p>\n<h1>get a chat completion from the formatted messages</h1>\n<p>chat(chat_prompt.format_prompt(input_language=\"English\", output_language=\"French\", text=\"I love programming.\").to_messages())</p>\n<h1>-&gt; AIMessage(content=\"J'aime programmer.\", additional_kwargs={})</h1>\n<p>```</p>\n<h2>Chains with Chat Models</h2>\n<p>The <code>LLMChain</code> discussed in the above section can be used with chat models as well:</p>\n<p>```python\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain import LLMChain\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)</p>\n<p>chat = ChatOpenAI(temperature=0)</p>\n<p>template=\"You are a helpful assistant that translates {input_language} to {output_language}.\"\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template=\"{text}\"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n", "type": "text", "translate": {"translate": true}, "length": 1138, "metadata": {}}, {"text": "chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])</p>\n<p>chain = LLMChain(llm=chat, prompt=chat_prompt)\nchain.run(input_language=\"English\", output_language=\"French\", text=\"I love programming.\")</p>\n<h1>-&gt; \"J'aime programmer.\"</h1>\n<p>```</p>\n<h2>Agents with Chat Models</h2>\n<p>Agents can also be used with chat models, you can initialize one using <code>AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION</code> as the agent type.</p>\n<p>```python\nfrom langchain.agents import load_tools\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI</p>\n<h1>First, let's load the language model we're going to use to control the agent.</h1>\n<p>chat = ChatOpenAI(temperature=0)</p>\n<h1>Next, let's load some tools to use. Note that the <code>llm-math</code> tool uses an LLM, so we need to pass that in.</h1>\n<p>llm = OpenAI(temperature=0)\n", "type": "text", "translate": {"translate": true}, "length": 981, "metadata": {}}, {"text": "tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)</p>\n<h1>Finally, let's initialize an agent with the tools, the language model, and the type of agent we want to use.</h1>\n<p>agent = initialize_agent(tools, chat, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)</p>\n<h1>Now let's test it out!</h1>\n<p>agent.run(\"Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?\")\n```</p>\n<p>```pycon</p>\n<blockquote>\n<p>Entering new AgentExecutor chain...\nThought: I need to use a search engine to find Olivia Wilde's boyfriend and a calculator to raise his age to the 0.23 power.\nAction:\n{\n  \"action\": \"Search\",\n  \"action_input\": \"Olivia Wilde boyfriend\"\n}</p>\n</blockquote>\n", "type": "text", "translate": {"translate": true}, "length": 711, "metadata": {}}, {"text": "<p>Observation: Sudeikis and Wilde's relationship ended in November 2020. Wilde was publicly served with court documents regarding child custody while she was presenting Don't Worry Darling at CinemaCon 2022. In January 2021, Wilde began dating singer Harry Styles after meeting during the filming of Don't Worry Darling.\nThought:I need to use a search engine to find Harry Styles' current age.\nAction:\n{\n  \"action\": \"Search\",\n  \"action_input\": \"Harry Styles age\"\n}</p>\n<p>Observation: 29 years\nThought:Now I need to calculate 29 raised to the 0.23 power.\nAction:\n{\n  \"action\": \"Calculator\",\n  \"action_input\": \"29^0.23\"\n}</p>\n<p>Observation: Answer: 2.169459462491557</p>\n<p>Thought:I now know the final answer.\nFinal Answer: 2.169459462491557</p>\n<blockquote>\n<p>Finished chain.\n'2.169459462491557'\n```</p>\n</blockquote>\n<h2>Memory: Add State to Chains and Agents</h2>\n", "type": "text", "translate": {"translate": true}, "length": 870, "metadata": {}}, {"text": "<p>You can use Memory with chains and agents initialized with chat models. The main difference between this and Memory for LLMs is that rather than trying to condense all previous messages into a string, we can keep them as their own unique memory object.</p>\n<p>```python\nfrom langchain.prompts import (\n    ChatPromptTemplate, \n    MessagesPlaceholder, \n    SystemMessagePromptTemplate, \n    HumanMessagePromptTemplate\n)\nfrom langchain.chains import ConversationChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.memory import ConversationBufferMemory</p>\n<p>prompt = ChatPromptTemplate.from_messages([\n    SystemMessagePromptTemplate.from_template(\"The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\"),\n    MessagesPlaceholder(variable_name=\"history\"),\n    HumanMessagePromptTemplate.from_template(\"{input}\")\n", "type": "text", "translate": {"translate": true}, "length": 1007, "metadata": {}}, {"text": "])</p>\n<p>llm = ChatOpenAI(temperature=0)\nmemory = ConversationBufferMemory(return_messages=True)\nconversation = ConversationChain(memory=memory, prompt=prompt, llm=llm)</p>\n<p>conversation.predict(input=\"Hi there!\")</p>\n<h1>-&gt; 'Hello! How can I assist you today?'</h1>\n<p>conversation.predict(input=\"I'm doing well! Just having a conversation with an AI.\")</p>\n<h1>-&gt; \"That sounds like fun! I'm happy to chat with you. Is there anything specific you'd like to talk about?\"</h1>\n<p>conversation.predict(input=\"Tell me about yourself.\")</p>\n<h1>-&gt; \"Sure! I am an AI language model created by OpenAI. I was trained on a large dataset of text from the internet, which allows me to understand and generate human-like language. I can answer questions, provide information, and even have conversations like this one. Is there anything else you'd like to know about me?\"</h1>\n<p>```</p>\n", "type": "text", "translate": {"translate": true}, "length": 889, "metadata": {}}]